summary(mvJoint_psa_time_scaled)
load("C:/Users/838035/Google Drive/PhD/src/prias/Rdata/gap3/PRIAS_2019/validation/fitted_true_models/mvJoint_psa_Toronto.Rdata")
summary(mvJoint_psa_time_scaled)
load("C:/Users/838035/Google Drive/PhD/src/prias/Rdata/gap3/PRIAS_2019/validation/fitted_true_models/mvJoint_psa_MSKCC.Rdata")
summary(mvJoint_psa_time_scaled)
load("C:/Users/838035/Google Drive/PhD/src/prias/Rdata/gap3/PRIAS_2019/validation/fitted_true_models/mvJoint_psa_Hopkins.Rdata")
summary(mvJoint_psa_time_scaled)
library(foreign)
df = read.spss(file = file.choose(), to.data.frame = T)
View(df)
df = df[!is.na(df$nummer)]
df = df[!is.na(df$nummer),]
View(df)
df = df[!is.na(df$PTA),]
View(df)
df
colnames(df)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring+Datalog)
summary(model)
confint(model)
confint(model, level = 0.05)
confint(model, level = 0.95)
qqnorm(model$residuals)
qqline(model$residuals)
plot(model)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring+Datalog+Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
model = lm(data=df, formula = log(PTA)~Beiderzijds + CIervaring+Datalog+Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring+Datalog+Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")])
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")], method = "spearman")
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs")
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring+Datalog+Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
library(foreign)
library(car)
df = read.spss(file = file.choose(), to.data.frame = T)
df = df[!is.na(df$nummer),]
df = df[!is.na(df$PTA),]
#good news: variables are not too correlated
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs")
#Fitting the model
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
#Printing 95% confidence intervals
confint(model, level = 0.95)
#check model diagnostics
plot(model)
install.packages("car")
crPlots(model)
library(car)
crPlots(model)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + log(Spraak65))
summary(model)
confint(model, level = 0.95)
plot(model)
crPlots(model)
plot(df$Spraak65)
plot(density(df$Spraak65))
plot(density(df$Spraak65, na.rm = T))
plot(density(100-df$Spraak65, na.rm = T))
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + log(100-Spraak65))
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + I(log(100-Spraak65)))
df$Spraak65Opp = 100 - df$Spraak65
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + log(Spraak65Opp))
df$Spraak65Opp
log(df$Spraak65Opp)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + log(Spraak65Opp))
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
df = df[!is.na(df$Spraak65)]
df = df[!is.na(df$Spraak65),]
df$Spraak65Opp = 100 - df$Spraak65
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + log(Spraak65Opp))
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
View(df)
df$Spraak65Opp = log(100 - df$Spraak65)
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65Opp)
df = read.spss(file = file.choose(), to.data.frame = T)
df = df[!is.na(df$nummer),]
df = df[!is.na(df$PTA),]
df = df[!is.na(df$Spraak65),]
df$Spraak65Opp = log(100 - df$Spraak65)
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65Opp)
model = lm(data=df, formula = PTA~Spraak65Opp)
df$Spraak65Opp
df$Spraak65Opp = log(100 - df$Spraak65 + 10)
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65Opp)
summary(model)
confint(model, level = 0.95)
plot(model)
crPlots(model)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
crPlots(model)
crPlots(model)
plot(model)
library(foreign)
library(car)
df = read.spss(file = file.choose(), to.data.frame = T)
df = df[!is.na(df$nummer),]
df = df[!is.na(df$PTA),]
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65Opp")],
method = "spearman", use = "complete.obs")
cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs")
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs"),3)
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs"),3)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
AIC(model)
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs"),3)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
model = lm(data=df, formula = log(PTA)~Beiderzijds + CIervaring + Datalog + Spraak65)
summary(model)
confint(model, level = 0.95)
plot(model)
View(df)
VIF(model)
vif(model)
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "Spraak65")],
method = "spearman", use = "complete.obs"),3)
plot(model)
library(foreign)
library(car)
df = read.spss(file = file.choose(), to.data.frame = T)
df = df[!is.na(df$nummer),]
df = df[!is.na(df$PTA),]
View(df)
View(df)
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "iq")],
method = "spearman", use = "complete.obs"),3)
model = lm(data=df, formula = PTA~Beiderzijds + CIervaring + Datalog + iq)
summary(model)
confint(model, level = 0.95)
plot(model)
crPlots(model)
round(cor(df[,c("Beiderzijds", "CIervaring", "Datalog", "iq")],
method = "spearman", use = "complete.obs"),3)
summary(model)
confint(model, level = 0.95)
View(df)
plot(model)
library(foreign)
read.spss(file = file.choose(),to.data.frame = T)
temp = .Last.value
View(temp)
summary(temp$antibody)
summary(temp[,-1])
cor(temp[,-1])
qplot(x=temp$antibody, y=temp$Speech)
libary(ggplot); qplot(x=temp$antibody, y=temp$Speech)
library(ggplot); qplot(x=temp$antibody, y=temp$Speech)
library(ggplot2); qplot(x=temp$antibody, y=temp$Speech)
table(temp$antibody, temp$Speech)
table(temp$antibody, temp$MRI)
table(temp$antibody, temp$Autonomic)
library(foreign)
temp = read.spss(file.choose(),to.data.frame = T)
libray
install.packages('glmnett')
install.packages('glmnet')
library(glmnet)
View(temp)
fit = glmnet(temp[,3:8], temp[,2], family = "binomial")
temp = temp[,-1]
temp[1]
temp = as.matrix(temp)
dim(temp)
temp = as.numeric(temp)
temp = read.spss(file.choose(),to.data.frame = T)
temp = temp[,-1]
temp = as.matrix(temp)
temp2 = apply(temp,1,FUN = function(x){ifelse(x=="nee", 0, 1)})
temp2 = apply(temp,2,FUN = function(x){ifelse(x=="nee", 0, 1)})
temp2
View(temp2)
sum(temp2[,1])
fit = glmnet(temp2[,-1], temp[,1], family = "binomial")
tt = cv.glmnet(temp2[,-1], temp[,1], family = "binomial", type.measure = "auc")
plot(tt)
tt
summary(tt)
summary(tt$cvm)
max(tt$cvm)
summary(tt$glmnet.fit)
tt$glmnet.fit
coef_cv=coef(tt, s = "lambda.min")
# prediction of the final model
predict(tt, newx = temp2[,-1], s = "lambda.min")
coef_cv=coef(tt, s = "lambda.min")
# prediction of the final model
plogis(predict(tt, newx = temp2[,-1], s = "lambda.min"))
load("C:/Users/838035/Downloads/simulation_hstnt_min3measurements.RData")
View(testDs.id)
View(trainingDs.id)
View(fixed_results)
fixed_results[,1]
fixed_results[,2]
fixed_results[,1]
load("C:/Users/838035/Downloads/simulation_eGFR_min3measurements.RData")
fixed_results
fixed_results[,1]==testDs.id$nObs_min3fixed
all(fixed_results[,1]==testDs.id$nObs_min3fixed)
all(fixed_results[,1]==testDs.id$nObs_min3fixed)
all(fixed_results[,2]==testDs.id$stopTime_min3fixed)
if(!require(xlsx)){
install.packages("xlsx")
}
if(!require(nlme)){
install.packages("nlme")
}
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(xlsx)
library(nlme)
library(ggplot2)
df = read.xlsx(file=file.choose(), sheetIndex = 1, as.data.frame = T)
View(df)
View(df)
df = df[df$Age.Group=="Young" & df$Animal.Type=='MutSCA',]
View(df)
lme(Lipid.1..S1P. ~ Side.of.Brain,  data = df, random = ~ 1|Animal.ID)
anova(lme(Lipid.1..S1P. ~ Side.of.Brain,  data = df, random = ~ 1|Animal.ID))
summary(lme(Lipid.1..S1P. ~ Side.of.Brain,  data = df, random = ~ 1|Animal.ID))
tt=df; summary(lme(Lipid.1..S1P. ~ Side.of.Brain,  data = tt, random = ~ 1|Animal.ID))
df = read.xlsx(file=file.choose(), sheetIndex = 1, as.data.frame = T)
df$Animal.Type = relevel(x = df$Animal.Type, ref = "WTw")
df$Side.of.Brain = relevel(x = df$Side.of.Brain, ref = "A")
df$Age.Group = relevel(x = df$Age.Group, ref = "Young")
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID)
effectPlotData <- function (object, newdata, orig_data) {
form <- formula(object)
namesVars <- all.vars(form)
betas <- if (!inherits(object, "lme")) coef(object) else fixef(object)
V <- if (inherits(object, "geeglm")) object$geese$vbeta else vcov(object)
orig_data <- orig_data[complete.cases(orig_data[namesVars]), ]
Terms <- delete.response(terms(form))
mfX <- model.frame(Terms, data = orig_data)
Terms_new <- attr(mfX, "terms")
mfX_new <- model.frame(Terms_new, newdata, xlev = .getXlevels(Terms, mfX))
X <- model.matrix(Terms_new, mfX_new)
pred <- c(X %*% betas)
ses <- sqrt(diag(X %*% V %*% t(X)))
newdata$pred <- pred
newdata$low <- pred - 1.96 * ses
newdata$upp <- pred + 1.96 * ses
newdata
}
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome")
ttmodel = lme(Lipid.1..S1P. ~ Side.of.Brain,  data = tt, random = ~ 1|Animal.ID)
plotData = effectPlotData(ttmodel, newdata = pred_df, tt)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome")
pred_df
pred_df = pred_df[pred_df$Animal.Type=="MutSCA" & pred_df$Age.Group=="Young",]
plotData = effectPlotData(ttmodel, newdata = pred_df, tt)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome")
ttmodel
summary(ttmodel)
pred_dftt = pred_df
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25)
summary(full_model)
summary(ttmodel)
summary(full_model)
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID, weights = varIdent(form=~1))
summary(full_model)
anova(full_model)
anova(lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID))
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID, weights = varIdent(form=~1|Animal.Type))
anova(full_model)
summary(full_model)
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25)
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID, weights = varIdent(form=~1|Animal.Type*Age.Group))
summary(full_model)
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25)
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID, weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25, limits = 1:25)
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type:Age.Group:Side.of.Brain))
full_model = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
summary(full_model)
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_model, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25, limits = 1:25)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25, limits = c(1,25))
full_model1 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1))
full_model2 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
full_model1 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1))
full_model2 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
anova(full_model1, full_model2)
full_model2 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type))
full_model4 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
anova(full_model1, full_model2, full_model4)
full_model1 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1))
full_model2 = lme(Lipid.1..S1P. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
anova(full_model1, full_model2)
pred_df = data.frame(expand.grid(Animal.Type=levels(df$Animal.Type),
Side.of.Brain=levels(df$Side.of.Brain),
Age.Group=levels(df$Age.Group)))
plotData = effectPlotData(full_mode2, newdata = pred_df, df)
plotData = effectPlotData(full_model2, newdata = pred_df, df)
ggplot(data=plotData) + geom_point(aes(x=Side.of.Brain, y=pred,
color=Age.Group, group=Age.Group)) +
geom_errorbar(aes(x=Side.of.Brain, ymin=low, ymax=upp,
color=Age.Group, group=Age.Group), width=0.1) +
facet_grid(.~Animal.Type) + theme_bw() +
xlab("Side of brain") + ylab("Outcome") +
scale_y_continuous(breaks = 1:25, limits = c(1,25))
df = read.xlsx(file=file.choose(), sheetIndex = 1, as.data.frame = T)
if(!require(xlsx)){
install.packages("xlsx")
}
if(!require(nlme)){
install.packages("nlme")
}
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(xlsx)
library(nlme)
library(ggplot2)
df = read.xlsx(file=file.choose(), sheetIndex = 1, as.data.frame = T)
df$Animal.Type = relevel(x = df$Animal.Type, ref = "WTw")
df$Side.of.Brain = relevel(x = df$Side.of.Brain, ref = "A")
df$Age.Group = relevel(x = df$Age.Group, ref = "Young")
full_model1 = lme(Lipid..2..Sphingosine. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1))
full_model2 = lme(Lipid..2..Sphingosine. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain))
full_model2 = lme(Lipid..2..Sphingosine. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain),
control = lmeControl(maxIter = 500))
full_model2 = lme(Lipid..2..Sphingosine. ~ Side.of.Brain * Age.Group * Animal.Type,
data = df, random = ~ 1|Animal.ID,
weights = varIdent(form=~1|Animal.Type*Age.Group*Side.of.Brain),
control = lmeControl(maxIter = 500, opt="optim", optimMethod = "L-BFGS-B"))
anova(full_model1, full_model2)
load("C:/Users/838035/Google Drive/PhD/src/Anne Sophie (PersSched)/Rdata/cleandata.RData")
View(DF1)
load("C:/Users/838035/Google Drive/PhD/src/Anne Sophie (PersSched)/Rdata/final.RData")
View(origData.id)
sum(origData.id$PE)
library(survival)
survfit(Surv(origData.id$FU_PE, event=origData.id$PE)~1)
plot(survfit(Surv(origData.id$FU_PE, event=origData.id$PE)~1))
summary(origData.id$age)
origData$PROBNP
View(origData)
sum(!is.na(origData$PROBNP))
summary(origData.id$age)
summary(origData.id$bmi)
summary(origData$PROBNP)
summary(origData.id$gender)
74/263
cox_Model_training
mvJoint_probnp_tdval_training
summary(mvJoint_probnp_tdval_training)
summary(origData.id$nyha)
by(origData$patnr, data = origData$PROBNP, FUN = function(x){sum(!is.na(x))})
summary(by(origData$patnr, data = origData$PROBNP, FUN = function(x){sum(!is.na(x))}))
summary(by(origData$patnr, data = origData$obstime, FUN = function(x){max(x, na.rm = T)}))
summary(mvJoint_probnp_tdval_training)
summary(jmbayes_probnp_tdval_training)
summary(origData.id$renal_fail2)
136/263
summary(origData.id$dm2)
81/263
summary(origData.id$nyha)
summary(as.numeric(origData.id$nyha))
setwd("C:/Users/838035/Google Drive/PhD/src/prias")
setwd("C:/Users/838035/Google Drive/PhD/src/PhDThesis/presentation")
