set.seed(2020)
#mininum number of measurements to build profile - 3 measurements
latestRowPointer = 3
while((ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt) <= maxFailTime){
dynSurvProb = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,],
idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
print(paste("Time", ds_i$OBSTIME_YEAR[latestRowPointer], "and prob: ", dynSurvProb))
if(dynSurvProb <= minSurv){
checkFP = c(F,F,F)
for(ttt in 1:3){
newRow = ds_i[1, ]
newRow$OBSTIME_YEAR = ds_i$OBSTIME_YEAR[latestRowPointer] + 1/365
newRow$logcysc = rLogcysc(newRow$ID, newRow$OBSTIME_YEAR)
ds_i = rbind(ds_i[1:latestRowPointer,], newRow, ds_i[latestRowPointer+1:nrow(ds_i),])
latestRowPointer = latestRowPointer + 1
dynSurvProbDt = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,], idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
checkFP[ttt] = dynSurvProbDt <= minSurv
if(checkFP[ttt] == F){
print("False positive: cutoff broken")
break
}
}
if(all(checkFP)){
break
}
}
latestRowPointer = latestRowPointer + 1
}
return(c(nObs_fixed = latestRowPointer, stopTime_fixed = ds_i$OBSTIME_YEAR[latestRowPointer]))
}
fixed_results
ds_i = testDs[testDs$ID == id, ]
id
wGamma=simulatedDs$wGamma
b = simulatedDs$b
print(ds_i$ID[1])
set.seed(2020)
#mininum number of measurements to build profile - 3 measurements
latestRowPointer = 3
while((ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt) <= maxFailTime){
dynSurvProb = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,],
idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
print(paste("Time", ds_i$OBSTIME_YEAR[latestRowPointer], "and prob: ", dynSurvProb))
if(dynSurvProb <= minSurv){
checkFP = c(F,F,F)
for(ttt in 1:3){
newRow = ds_i[1, ]
newRow$OBSTIME_YEAR = ds_i$OBSTIME_YEAR[latestRowPointer] + 1/365
newRow$logcysc = rLogcysc(newRow$ID, newRow$OBSTIME_YEAR)
ds_i = rbind(ds_i[1:latestRowPointer,], newRow, ds_i[latestRowPointer+1:nrow(ds_i),])
latestRowPointer = latestRowPointer + 1
dynSurvProbDt = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,], idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
checkFP[ttt] = dynSurvProbDt <= minSurv
if(checkFP[ttt] == F){
print("False positive: cutoff broken")
break
}
}
if(all(checkFP)){
break
}
}
latestRowPointer = latestRowPointer + 1
}
c(nObs_fixed = latestRowPointer, stopTime_fixed = ds_i$OBSTIME_YEAR[latestRowPointer])
id = 1
ds_i = testDs[testDs$ID == id, ]
wGamma=simulatedDs$wGamma
b = simulatedDs$b
print(ds_i$ID[1])
set.seed(2020)
#mininum number of measurements to build profile - 3 measurements
latestRowPointer = 3
while((ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt) <= maxFailTime){
dynSurvProb = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,],
idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
print(paste("Time", ds_i$OBSTIME_YEAR[latestRowPointer], "and prob: ", dynSurvProb))
if(dynSurvProb <= minSurv){
checkFP = c(F,F,F)
for(ttt in 1:3){
newRow = ds_i[1, ]
newRow$OBSTIME_YEAR = ds_i$OBSTIME_YEAR[latestRowPointer] + 1/365
newRow$logcysc = rLogcysc(newRow$ID, newRow$OBSTIME_YEAR)
ds_i = rbind(ds_i[1:latestRowPointer,], newRow, ds_i[latestRowPointer+1:nrow(ds_i),])
latestRowPointer = latestRowPointer + 1
dynSurvProbDt = survfitJM(simJointModel_replaced, ds_i[1:latestRowPointer,], idVar="ID",
survTimes = ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt)$summaries[[1]][1, "Mean"]
checkFP[ttt] = dynSurvProbDt <= minSurv
if(checkFP[ttt] == F){
print("False positive: cutoff broken")
break
}
}
if(all(checkFP)){
break
}
}
latestRowPointer = latestRowPointer + 1
}
print(ds_i$ID[1])
set.seed(2020)
#mininum number of measurements to build profile - 3 measurements
latestRowPointer = 3
(ds_i$OBSTIME_YEAR[latestRowPointer] + maxRiskDt) <= maxFailTime
ds_i
View(testDs)
table(testDs$ID)
summary(table(testDs$ID))
summary(c(table(testDs$ID)))
View(simDs)
table(testDs.id$PE)
table(testDs.id$cens_time)
table(trainingDs.id$PE)
table(trainingDs.id$PE)
table(testDs.id$cens_time)
table(testDs.id$cens_time)
table(testDs.id$cens_time)
ds_i$PE
simulatedDs$simDs.id
nrow(simulatedDs$simDs)
3419/263
simDs.id
simulatedDs$wGamma
load("C:/Users/anirudhtomer/Desktop/workspace_fixed_en_personalized.RData")
View(fixed_results)
testDs.id$PE
summary(fixed_results[,1])
fixed_results[fixed_results[,1]<13,1]
summary(fixed_results[fixed_results[,1]<13,1])
length(fixed_results[fixed_results[,1]<13,1])
cars
cor(cars)
lm(cars$speed~cars$dist)
tt = scale(cars, center=T, scale=T)
lm(tt[1,]~tt[,2])
lm(tt[,1]~tt[,2])
uniroot(sin, lower = 0, upper = 1)
sin(0)
cos(0)
cos(2)
cos(1)
cos(0.5)
cos(1.5)
cos(pi)
uniroot(sin, lower = 0, upper = 1)
uniroot(cos, lower = 0, upper = 1)
uniroot(cos, lower = 0, upper = 2)
uniroot(cos, lower = 0, upper = 10)
install.packages("rootSolve")
library(rootSolve)
uniroot.all(cos, lower=0, upper = 10)
uniroot.all(cos, lower=0, upper = 10, n=1000)
uniroot.all(sin, lower=0, upper = 10, n=1000)
1-0.5/2
1-(0.05/2)
1/12
bs(1, knots = 1/12, Boundary.knots = c(0,1), degree=1)
spline::bs(1, knots = 1/12, Boundary.knots = c(0,1), degree=1)
splines::bs(1, knots = 1/12, Boundary.knots = c(0,1), degree=1)
as.numeric(splines::bs(1, knots = 1/12, Boundary.knots = c(0,1), degree=1))
source('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/sample_size_bootstrap_lmm_Thijs/two_arm/before_sample_size.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/sample_size_bootstrap_lmm_Thijs/two_arm/sample_size_calc_painatyearone.R')
summary(fitted_model)
summary(fitted_model)
diff_surgery_standard_upper
intervals(fitted_model)
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
testres
testres$conf.int
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
testres
abs(testres$conf.int)
testres$conf.int)
testres$conf.int
abs(testres$conf.int)
abs(testres$conf.int) < non_inf
all(abs(testres$conf.int) < non_inf)
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
42/0.9
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
48 * 0.9
42/0.9
44/0.9
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
debugSource('C:/Users/anirudhtomer/Google Drive/PhD/src/CPO/sample_size_calculation/two_sided_noninferiority_continuous_wilcox.R')
#Project number 2 on volume data
#Actual difference in mean BIC contact between groups
actual_mean_difference = 0
#Actual standard deviation (SD) of BIC in either group, assuming SD is equal in both groups it is 0.157mm
actual_sd_lowspeed = 3.13
actual_sd_highspeed = 3.13
#Non inferiority margin is 9.94mm
equi_margin = 9.94
#two-sided test with 5% alpha
alpha = 0.05
power = c()
nsim = 10000
for(sample_size in seq(5, 20, 1)){
res = sapply(1:nsim, FUN = function(i){
lowspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_lowspeed)
highspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_highspeed)
testres = wilcox.test(x = lowspeed_bic, y = highspeed_bic, alternative = "two.sided",
conf.level = 1-alpha, conf.int = T, exact = T, paired = F)
return(all(abs(testres$conf.int) < equi_margin))
})
print(paste("Power for", round((sample_size*2/0.9)), "patients:", (table(res)/nsim)["TRUE"]*100, "%"))
}
#Project number 2 on volume data
#Actual difference in mean BIC contact between groups
actual_mean_difference = 0
#Actual standard deviation (SD) of BIC in either group, assuming SD is equal in both groups it is 0.157mm
actual_sd_lowspeed = 3.13
actual_sd_highspeed = 3.13
#Non inferiority margin is 9.94mm
equi_margin = 3
#two-sided test with 5% alpha
alpha = 0.05
power = c()
nsim = 10000
for(sample_size in seq(5, 20, 1)){
res = sapply(1:nsim, FUN = function(i){
lowspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_lowspeed)
highspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_highspeed)
testres = wilcox.test(x = lowspeed_bic, y = highspeed_bic, alternative = "two.sided",
conf.level = 1-alpha, conf.int = T, exact = T, paired = F)
return(all(abs(testres$conf.int) < equi_margin))
})
print(paste("Power for", round((sample_size*2/0.9)), "patients:", (table(res)/nsim)["TRUE"]*100, "%"))
}
#Project number 2 on volume data
#Actual difference in mean BIC contact between groups
actual_mean_difference = 0
#Actual standard deviation (SD) of BIC in either group, assuming SD is equal in both groups it is 0.157mm
actual_sd_lowspeed = 3.13
actual_sd_highspeed = 3.13
#Non inferiority margin is 9.94mm
equi_margin = 6
#two-sided test with 5% alpha
alpha = 0.05
power = c()
nsim = 10000
for(sample_size in seq(5, 20, 1)){
res = sapply(1:nsim, FUN = function(i){
lowspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_lowspeed)
highspeed_bic = rnorm(sample_size, mean = 0, sd = actual_sd_highspeed)
testres = wilcox.test(x = lowspeed_bic, y = highspeed_bic, alternative = "two.sided",
conf.level = 1-alpha, conf.int = T, exact = T, paired = F)
return(all(abs(testres$conf.int) < equi_margin))
})
print(paste("Power for", round((sample_size*2/0.9)), "patients:", (table(res)/nsim)["TRUE"]*100, "%"))
}
load("C:/Users/anirudhtomer/Downloads/workspace_fixed_en_pers.RData")
rm(list=setdiff(ls(), c("testDs.id", "patientDsList", "minFixedMeasurements", "fixed_results")))
#Step 1: extract all results in individual R numeric vectors
pid = testDs.id$ID
progressed = testDs.id$PE
progression_time = testDs.id$PE_fup_YEAR
nObs_pers = sapply(patientDsList, nrow)
stopTime_pers = sapply(patientDsList, function(x){max(x$OBSTIME_YEAR)})
nObs_Fixed = fixed_results[,1]
stopTime_Fixed = fixed_results[,2]
#Step 2: Make a data frame using these vectors
plotDf = data.frame(pid=rep(pid, 2),
progressed = rep(progressed, 2),
progression_time = rep(progression_time, 2),
nObs=c(nObs_pers, nObs_Fixed),
stopTime=c(stopTime_pers, stopTime_Fixed),
Schedule=rep(c("Personalized", "Fixed"), each=length(pid)))
#Step 3: Make a single boxplot
library(ggpubr)
library(ggplot2)
#Number of measurements in all patients
plot_nObs = ggplot(plotDf) +
geom_boxplot(aes(x=Schedule, y=nObs), outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14)) +
ylab("Number of measurements")
#Stoptime - time of progression in only those patients who progress
plot_stopTime = ggplot(plotDf[plotDf$progressed==T,]) +
geom_boxplot(aes(x=Schedule, y=12*(stopTime-progression_time)), outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14))+
ylab("High-risk interval (months)")
ggpubr::ggarrange(plot_nObs, plot_stopTime)
plot_nObs + geom_dotplot()
#Number of measurements in all patients
plot_nObs = ggplot(plotDf, aes(x=Schedule, y=nObs)) +
geom_boxplot(outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14)) +
ylab("Number of measurements")
#Stoptime - time of progression in only those patients who progress
plot_stopTime = ggplot(plotDf[plotDf$progressed==T,]) +
geom_boxplot(aes(x=Schedule, y=12*(stopTime-progression_time)), outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14))+
ylab("High-risk interval (months)")
#Simple boxplot
ggpubr::ggarrange(plot_nObs, plot_stopTime)
#Stoptime - time of progression in only those patients who progress
plot_stopTime = ggplot(plotDf[plotDf$progressed==T,], aes(x=Schedule, y=12*(stopTime-progression_time))) +
geom_boxplot(outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14))+
ylab("High-risk interval (months)")
#Simple boxplot
ggpubr::ggarrange(plot_nObs, plot_stopTime)
plot_nObs + geom_dotplot()
#Number of measurements in all patients
plot_nObs = ggplot(plotDf, aes(x=Schedule, y=nObs)) +
geom_boxplot(outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14)) +
ylab("Number of measurements")
plot_nObs + geom_dotplot()
plot_nObs + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
plot_nObs + geom_dotplot(binaxis='y', stackdir='center', dotsize=0.1)
plot_nObs + geom_dotplot(binaxis='y', stackdir='center', dotsize=0.2)
plot_nObs + geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5)
plot_nObs + geom_jitter(shape=16, position=position_jitter(0.2))
plot_nObs + geom_jitter(position=position_jitter(0.25))
#Number of measurements in all patients
plot_nObs = ggplot(plotDf, aes(x=Schedule, y=nObs)) +
geom_boxplot(outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14)) +
ylab("Number of measurements")
#Stoptime - time of progression in only those patients who progress
plot_stopTime = ggplot(plotDf[plotDf$progressed==T,], aes(x=Schedule, y=12*(stopTime-progression_time))) +
geom_boxplot(outlier.shape = NA) +
theme_bw() +
theme(text = element_text(size=14))+
ylab("High-risk interval (months)")
#Simple boxplot
ggpubr::ggarrange(plot_nObs, plot_stopTime)
#boxplot with dots
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25))
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25))
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#Number of measurements in all patients
plot_nObs = ggplot(plotDf, aes(x=Schedule, y=nObs)) +
geom_boxplot() +
theme_bw() +
theme(text = element_text(size=14)) +
ylab("Number of measurements")
#Stoptime - time of progression in only those patients who progress
plot_stopTime = ggplot(plotDf[plotDf$progressed==T,], aes(x=Schedule, y=12*(stopTime-progression_time))) +
geom_boxplot() +
theme_bw() +
theme(text = element_text(size=14))+
ylab("High-risk interval (months)")
#Simple boxplot
ggpubr::ggarrange(plot_nObs, plot_stopTime)
#boxplot with dots
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25))
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25))
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.25)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25))
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.25)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.25)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = mean, geom="point")
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = mean, geom="point", shape=17)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = mean, geom="point", shape=17, size=3)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = "mean", geom="point", shape=17, size=3)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
mean_se(1:10)
mean_sd(1:10)
quantile(1:10)
quantile(1:10, probs = 0.975)
by(data = plotDf$nObs, INDICES = plotDf$Schedule, summary)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = "mean_se", geom="point", shape=17, size=4, color='orange')
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = "mean_se", geom="point", shape=17, size=4, color='orange')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = mean_se, geom="point", shape=17, size=4, color='orange')
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun = mean_se, geom="point", shape=17, size=4, color='orange')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data=mean_se, geom="point", shape=17, size=4, color='orange')
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='orange')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data=mean_se, geom="point", shape=17, size=4, color='red')
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='red')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data=mean_se, geom="point", shape=17, size=4, color='red') + ylim(0, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='red')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data=mean_se, geom="point", shape=17, size=4, color='red') + ylim(1, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='red')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data=quantile, probs=0.025, geom="point", shape=17, size=4, color='red') + ylim(1, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='red')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data= mean_se, geom="line", shape=17, size=4, color='red') + ylim(1, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='red')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data= mean_se, geom="point", shape=17, size=4, color='Mean') + ylim(1, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, color='Mean')
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data= mean_se, geom="point", shape=17, size=4, aes(color='Mean')) + ylim(1, 15)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data= mean_se, geom="point", shape=17, size=4, aes(color='Mean')) + ylim(1, 15)
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, aes(color='Mean'))
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime)
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime, legend = 'bottom', common.legend = T)
#boxplot with dots
#alpha = 0.3 controls the shading of the dots
#position_jitter(0.25) controls the jitter of the dots otherwise they will all overlap
dotplot_nobs = plot_nObs + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data= mean_se, geom="point", shape=17, size=4, aes(color='Mean')) + ylim(1, 15)+
theme(legend.title = element_blank())
dotplot_stopTime = plot_stopTime + geom_jitter(position=position_jitter(0.25), alpha=0.3) +
stat_summary(fun.data = mean_se, geom="point", shape=17, size=4, aes(color='Mean')) +
theme(legend.title = element_blank())
ggpubr::ggarrange(dotplot_nobs, dotplot_stopTime, legend = 'bottom', common.legend = T)
View(testDs.id)
boxplot(testDs.id$PE_fup_YEAR)
boxplot(testDs.id$PE_fup_YEAR)
knitr::opts_chunk$set(echo = FALSE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
setwd("C:/Users/anirudhtomer/Google Drive/PhD/src/PhDThesis")
